# Always prefer ssh auth instead of https
[url "git@github.com:"]
	insteadOf = https://github.com/

[commit]
  template = ~/.bash_scripts/gitmessage

[alias]
  st = status --short --branch
  co = checkout
  sw = switch
  # Given a GitHub PR number, check out the code for that PR
  co-pr = !sh -c 'git fetch upstream pull/$1/head:pr/$1 && git checkout pr/$1' -
  ci = commit
  br = branch
  fp = fetch -p
  fetch-p = fetch -p
  fork-point = "!f() { set -e; HASH=`git merge-base --fork-point \"$1\"`; shift; git log -n1 \"$HASH\"; }; f"
  #fork-point = merge-base --fork-point
  # brdm: Clean up local branches that have already been merged
  brdm = "!git branch --merged | egrep -v '^\\*|master|main' | xargs -n 1 git branch -d"
  whenadded = log --diff-filter=A
  dl = "!git ll -1"
  dlc = diff --cached HEAD^

  # A gentler way to force push
  please = push --force-with-lease

  # stsh: only unstaged changes to tracked files
  stsh = stash --keep-index
  # stash: any changes to tracked files
  # staash: untracked and tracked files
  staash = stash --include-untracked
  # staaash: ignored, untracked, and tracked files
  staaash = stash --all

  # Usage:
  #$ git inject <commit-ref> <patch-ref>
  #$ git inject HEAD^^ -a # inject all work-dir modifications
  #$ git inject a28kd8 -p # interactively select patches to inject
  #$ git inject HEAD~4 file1 # inject the modifications in file1
  # via https://news.ycombinator.com/item?id=9705690
  inject = "!f() { set -e; HASH=`git show \"$1\" --pretty=format:\"%H\" -q`; shift; git commit -m \"fixup! $HASH\" $*; [ -n \"$(git diff-files)\" ] && git stash && DIRTY=1; git rebase $HASH^^ -i --autosquash; [ -n \"$DIRTY\" ] && git stash pop;}; f"


[user]
  email = webmaster@wrightkuhns.com
  name = Marcos Wright-Kuhns
[push]
  default = current
[pull]
  rebase = true
[rebase]
  autoStash = true
[branch]
  sort = committerdate
[filter "media"]
  clean = git media clean %f
  smudge = git media smudge %f
  required = true
[core]
  editor = /usr/bin/vim
  autocrlf = input
  # excludesFile = ~/.bash_scripts/gitignore
  precomposeunicode = true
  pager = delta
[interactive]
  diffFilter = delta --color-only
[delta]
  # side-by-side = true
  navigate = true
  light = false
[merge]
  ff = false
  conflictstyle = diff3
[diff]
  colorMoved = default
  algorithm = histogram
[apply]
  ignoreWhitespace = false
[rerere]
  enabled = true
[init]
  defaultBranch = main

[includeIf "gitdir:~/workspace/"]
  path = ~/.bash_scripts/gitconfig-for-work
